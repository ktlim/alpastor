# 
# apiVersion: v1
# kind: Secret
# metadata:
#   name: grafana
#   labels:
#     app: grafana
# type: Opaque
# data:
#   admin-user: "YWRtaW4="
#   # Elvqhc8zmdZd2eIKRgAWlmUYUtp7B3WOKfxgDNxc
#   admin-password: "RWx2cWhjOHptZFpkMmVJS1JnQVdsbVVZVXRwN0IzV09LZnhnRE54Yw=="
#   ldap-toml: ""
# 
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  serviceName: grafana
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 472
      containers:
        - name: grafana
          image: "grafana/grafana:6.5.0"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: data
              mountPath: "/var/lib/grafana"
          ports:
            - name: service
              containerPort: 80
              protocol: TCP
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: admin-password
            - name: GF_INSTALL_PLUGINS
              #value: grafana-clock-panel,grafana-simple-json-datasource
              value: http://yum.slac.stanford.edu/grafana/grafana-piechart-panel.zip;grafana-piechart-panel
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: grafana
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "grafana-prod--data"
      resources:
        requests:
          storage: 10Gi
